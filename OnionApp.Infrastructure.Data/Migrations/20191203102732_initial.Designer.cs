// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;
using OnionApp.Infrastructure.Data;

namespace OnionApp.Infrastructure.Data.Migrations
{
    [DbContext(typeof(ScanContext))]
    [Migration("20191203102732_initial")]
    partial class initial
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.SerialColumn)
                .HasAnnotation("ProductVersion", "2.2.4-servicing-10062")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            modelBuilder.Entity("OnionApp.Domain.Core.Entities.Accounts.Role", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<int>("CreatedBy");

                    b.Property<DateTime>("CreatedDate");

                    b.Property<bool>("IsEnabled");

                    b.Property<int?>("ModifiedBy");

                    b.Property<DateTime?>("ModifiedDate");

                    b.Property<string>("RoleName");

                    b.Property<uint>("RowVersion")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnName("xmin")
                        .HasColumnType("xid");

                    b.HasKey("Id");

                    b.ToTable("Role","accounts");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CreatedBy = 1,
                            CreatedDate = new DateTime(2019, 12, 3, 13, 27, 31, 856, DateTimeKind.Local).AddTicks(585),
                            IsEnabled = true,
                            RoleName = "admin",
                            RowVersion = 0u
                        },
                        new
                        {
                            Id = 2,
                            CreatedBy = 1,
                            CreatedDate = new DateTime(2019, 12, 3, 13, 27, 31, 858, DateTimeKind.Local).AddTicks(4501),
                            IsEnabled = true,
                            RoleName = "user",
                            RowVersion = 0u
                        });
                });

            modelBuilder.Entity("OnionApp.Domain.Core.Entities.Accounts.Rule", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<int>("CreatedBy");

                    b.Property<DateTime>("CreatedDate");

                    b.Property<bool>("IsEnabled");

                    b.Property<int?>("ModifiedBy");

                    b.Property<DateTime?>("ModifiedDate");

                    b.Property<int>("RoleId");

                    b.Property<uint>("RowVersion")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnName("xmin")
                        .HasColumnType("xid");

                    b.Property<int>("SysFunctionId");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.HasIndex("SysFunctionId");

                    b.ToTable("Rule","accounts");
                });

            modelBuilder.Entity("OnionApp.Domain.Core.Entities.Accounts.SysFunction", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<int>("CreatedBy");

                    b.Property<DateTime>("CreatedDate");

                    b.Property<bool>("IsEnabled");

                    b.Property<int?>("ModifiedBy");

                    b.Property<DateTime?>("ModifiedDate");

                    b.Property<uint>("RowVersion")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnName("xmin")
                        .HasColumnType("xid");

                    b.Property<string>("SysFunctionName");

                    b.HasKey("Id");

                    b.ToTable("SysFunction","accounts");
                });

            modelBuilder.Entity("OnionApp.Domain.Core.Entities.Accounts.User", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<int>("CreatedBy");

                    b.Property<DateTime>("CreatedDate");

                    b.Property<bool>("IsEnabled");

                    b.Property<string>("Login");

                    b.Property<int?>("ModifiedBy");

                    b.Property<DateTime?>("ModifiedDate");

                    b.Property<string>("Password");

                    b.Property<int>("RoleId");

                    b.Property<uint>("RowVersion")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnName("xmin")
                        .HasColumnType("xid");

                    b.Property<string>("UserName");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("User","accounts");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CreatedBy = 1,
                            CreatedDate = new DateTime(2019, 12, 3, 13, 27, 31, 858, DateTimeKind.Local).AddTicks(5540),
                            IsEnabled = true,
                            Login = "admin@mail.ru",
                            Password = "123456",
                            RoleId = 1,
                            RowVersion = 0u
                        },
                        new
                        {
                            Id = 2,
                            CreatedBy = 1,
                            CreatedDate = new DateTime(2019, 12, 3, 13, 27, 31, 858, DateTimeKind.Local).AddTicks(8190),
                            IsEnabled = true,
                            Login = "tom@mail.ru",
                            Password = "123456",
                            RoleId = 1,
                            RowVersion = 0u
                        },
                        new
                        {
                            Id = 3,
                            CreatedBy = 1,
                            CreatedDate = new DateTime(2019, 12, 3, 13, 27, 31, 858, DateTimeKind.Local).AddTicks(8212),
                            IsEnabled = true,
                            Login = "bob@mail.ru",
                            Password = "123456",
                            RoleId = 2,
                            RowVersion = 0u
                        },
                        new
                        {
                            Id = 4,
                            CreatedBy = 1,
                            CreatedDate = new DateTime(2019, 12, 3, 13, 27, 31, 858, DateTimeKind.Local).AddTicks(8214),
                            IsEnabled = true,
                            Login = "sam@mail.ru",
                            Password = "123456",
                            RoleId = 2,
                            RowVersion = 0u
                        });
                });

            modelBuilder.Entity("OnionApp.Domain.Core.Entities.Accounts.UserMessage", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<int>("CreatedBy");

                    b.Property<DateTime>("CreatedDate");

                    b.Property<bool>("IsEnabled");

                    b.Property<bool>("IsReaded");

                    b.Property<string>("Message");

                    b.Property<int?>("ModifiedBy");

                    b.Property<DateTime?>("ModifiedDate");

                    b.Property<DateTime>("ReadDate");

                    b.Property<uint>("RowVersion")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnName("xmin")
                        .HasColumnType("xid");

                    b.Property<int>("ToUserId");

                    b.HasKey("Id");

                    b.HasIndex("ToUserId");

                    b.ToTable("UserMessage","accounts");
                });

            modelBuilder.Entity("OnionApp.Domain.Core.Entities.Devices.Device", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<int>("CreatedBy");

                    b.Property<DateTime>("CreatedDate");

                    b.Property<string>("DeviceSettings");

                    b.Property<int>("DeviceTypeId");

                    b.Property<bool>("IsEnabled");

                    b.Property<int?>("ModifiedBy");

                    b.Property<DateTime?>("ModifiedDate");

                    b.Property<uint>("RowVersion")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnName("xmin")
                        .HasColumnType("xid");

                    b.HasKey("Id");

                    b.HasIndex("DeviceTypeId");

                    b.ToTable("Device","devices");
                });

            modelBuilder.Entity("OnionApp.Domain.Core.Entities.Devices.DeviceType", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<int>("CreatedBy");

                    b.Property<DateTime>("CreatedDate");

                    b.Property<string>("DeviceTypeDescription");

                    b.Property<string>("DeviceTypeName")
                        .HasMaxLength(64);

                    b.Property<bool>("IsEnabled");

                    b.Property<int?>("ModifiedBy");

                    b.Property<DateTime?>("ModifiedDate");

                    b.Property<uint>("RowVersion")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnName("xmin")
                        .HasColumnType("xid");

                    b.HasKey("Id");

                    b.ToTable("DeviceType","devices");
                });

            modelBuilder.Entity("OnionApp.Domain.Core.Entities.Processing.Change", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<int>("CreatedBy");

                    b.Property<DateTime>("CreatedDate");

                    b.Property<bool>("IsEnabled");

                    b.Property<int?>("ModifiedBy");

                    b.Property<DateTime?>("ModifiedDate");

                    b.Property<uint>("RowVersion")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnName("xmin")
                        .HasColumnType("xid");

                    b.HasKey("Id");

                    b.ToTable("Change","processing");
                });

            modelBuilder.Entity("OnionApp.Domain.Core.Entities.Processing.Order", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<Guid>("ChangeId");

                    b.Property<int>("CreatedBy");

                    b.Property<DateTime>("CreatedDate");

                    b.Property<DateTime>("FinishDate");

                    b.Property<bool>("IsEnabled");

                    b.Property<int?>("ModifiedBy");

                    b.Property<DateTime?>("ModifiedDate");

                    b.Property<Guid?>("OrderId");

                    b.Property<int>("OrderStatusId");

                    b.Property<uint>("RowVersion")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnName("xmin")
                        .HasColumnType("xid");

                    b.HasKey("Id");

                    b.HasIndex("ChangeId");

                    b.HasIndex("OrderId");

                    b.HasIndex("OrderStatusId");

                    b.ToTable("Order","processing");
                });

            modelBuilder.Entity("OnionApp.Domain.Core.Entities.Processing.OrderPosition", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<int>("CreatedBy");

                    b.Property<DateTime>("CreatedDate");

                    b.Property<bool>("IsEnabled");

                    b.Property<int?>("ModifiedBy");

                    b.Property<DateTime?>("ModifiedDate");

                    b.Property<uint>("RowVersion")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnName("xmin")
                        .HasColumnType("xid");

                    b.Property<Guid>("SAPBarcodeId");

                    b.HasKey("Id");

                    b.HasIndex("SAPBarcodeId");

                    b.ToTable("OrderPosition","processing");
                });

            modelBuilder.Entity("OnionApp.Domain.Core.Entities.Processing.OrderStatus", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<int>("CreatedBy");

                    b.Property<DateTime>("CreatedDate");

                    b.Property<bool>("IsEnabled");

                    b.Property<int?>("ModifiedBy");

                    b.Property<DateTime?>("ModifiedDate");

                    b.Property<string>("OrderStatusDescription");

                    b.Property<string>("OrderStatusName");

                    b.Property<uint>("RowVersion")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnName("xmin")
                        .HasColumnType("xid");

                    b.HasKey("Id");

                    b.ToTable("OrderStatus","processing");
                });

            modelBuilder.Entity("OnionApp.Domain.Core.Entities.Processing.SAPBarcode", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Barcode");

                    b.Property<int>("CreatedBy");

                    b.Property<DateTime>("CreatedDate");

                    b.Property<bool>("IsEnabled");

                    b.Property<bool>("IsScanned");

                    b.Property<int?>("ModifiedBy");

                    b.Property<DateTime?>("ModifiedDate");

                    b.Property<Guid>("OrderId");

                    b.Property<uint>("RowVersion")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnName("xmin")
                        .HasColumnType("xid");

                    b.HasKey("Id");

                    b.HasIndex("OrderId");

                    b.ToTable("SAPBarcode","processing");
                });

            modelBuilder.Entity("OnionApp.Domain.Core.Entities.Accounts.Rule", b =>
                {
                    b.HasOne("OnionApp.Domain.Core.Entities.Accounts.Role", "Role")
                        .WithMany("Rules")
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("OnionApp.Domain.Core.Entities.Accounts.SysFunction", "SysFunction")
                        .WithMany("Rules")
                        .HasForeignKey("SysFunctionId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("OnionApp.Domain.Core.Entities.Accounts.User", b =>
                {
                    b.HasOne("OnionApp.Domain.Core.Entities.Accounts.Role", "Role")
                        .WithMany("Users")
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("OnionApp.Domain.Core.Entities.Accounts.UserMessage", b =>
                {
                    b.HasOne("OnionApp.Domain.Core.Entities.Accounts.User", "User")
                        .WithMany("UserMessages")
                        .HasForeignKey("ToUserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("OnionApp.Domain.Core.Entities.Devices.Device", b =>
                {
                    b.HasOne("OnionApp.Domain.Core.Entities.Devices.DeviceType", "DeviceType")
                        .WithMany("Devices")
                        .HasForeignKey("DeviceTypeId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("OnionApp.Domain.Core.Entities.Processing.Order", b =>
                {
                    b.HasOne("OnionApp.Domain.Core.Entities.Processing.Change", "Change")
                        .WithMany("Orders")
                        .HasForeignKey("ChangeId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("OnionApp.Domain.Core.Entities.Processing.Order")
                        .WithMany("Orders")
                        .HasForeignKey("OrderId");

                    b.HasOne("OnionApp.Domain.Core.Entities.Processing.OrderStatus", "OrderStatus")
                        .WithMany("Orders")
                        .HasForeignKey("OrderStatusId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("OnionApp.Domain.Core.Entities.Processing.OrderPosition", b =>
                {
                    b.HasOne("OnionApp.Domain.Core.Entities.Processing.SAPBarcode", "SAPBarcode")
                        .WithMany("OrderPositions")
                        .HasForeignKey("SAPBarcodeId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("OnionApp.Domain.Core.Entities.Processing.SAPBarcode", b =>
                {
                    b.HasOne("OnionApp.Domain.Core.Entities.Processing.Order", "Order")
                        .WithMany()
                        .HasForeignKey("OrderId")
                        .OnDelete(DeleteBehavior.Cascade);
                });
#pragma warning restore 612, 618
        }
    }
}
