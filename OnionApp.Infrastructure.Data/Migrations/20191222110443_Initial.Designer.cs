// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;
using OnionApp.Infrastructure.Data;

namespace OnionApp.Infrastructure.Data.Migrations
{
    [DbContext(typeof(ScanContext))]
    [Migration("20191222110443_Initial")]
    partial class Initial
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.SerialColumn)
                .HasAnnotation("ProductVersion", "2.2.6-servicing-10079")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            modelBuilder.Entity("OnionApp.Domain.Core.Entities.Accounts.Role", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<int>("CreatedBy");

                    b.Property<DateTime>("CreatedDate");

                    b.Property<bool>("IsDeleted");

                    b.Property<int?>("ModifiedBy");

                    b.Property<DateTime?>("ModifiedDate");

                    b.Property<string>("RoleName");

                    b.Property<uint>("RowVersion")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnName("xmin")
                        .HasColumnType("xid");

                    b.HasKey("Id");

                    b.ToTable("Roles","accounts");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CreatedBy = 1,
                            CreatedDate = new DateTime(2019, 12, 22, 14, 4, 42, 585, DateTimeKind.Local).AddTicks(9499),
                            IsDeleted = true,
                            RoleName = "admin",
                            RowVersion = 0u
                        },
                        new
                        {
                            Id = 2,
                            CreatedBy = 1,
                            CreatedDate = new DateTime(2019, 12, 22, 14, 4, 42, 594, DateTimeKind.Local).AddTicks(4504),
                            IsDeleted = true,
                            RoleName = "user",
                            RowVersion = 0u
                        });
                });

            modelBuilder.Entity("OnionApp.Domain.Core.Entities.Accounts.Rule", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<int>("CreatedBy");

                    b.Property<DateTime>("CreatedDate");

                    b.Property<bool>("IsDeleted");

                    b.Property<int?>("ModifiedBy");

                    b.Property<DateTime?>("ModifiedDate");

                    b.Property<int>("RoleId");

                    b.Property<uint>("RowVersion")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnName("xmin")
                        .HasColumnType("xid");

                    b.Property<int>("SysFunctionId");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.HasIndex("SysFunctionId");

                    b.ToTable("Rules","accounts");
                });

            modelBuilder.Entity("OnionApp.Domain.Core.Entities.Accounts.SysFunction", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<int>("CreatedBy");

                    b.Property<DateTime>("CreatedDate");

                    b.Property<bool>("IsDeleted");

                    b.Property<int?>("ModifiedBy");

                    b.Property<DateTime?>("ModifiedDate");

                    b.Property<uint>("RowVersion")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnName("xmin")
                        .HasColumnType("xid");

                    b.Property<string>("SysFunctionName");

                    b.HasKey("Id");

                    b.ToTable("SysFunctions","accounts");
                });

            modelBuilder.Entity("OnionApp.Domain.Core.Entities.Accounts.User", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<int>("CreatedBy");

                    b.Property<DateTime>("CreatedDate");

                    b.Property<bool>("IsDeleted");

                    b.Property<string>("Login");

                    b.Property<int?>("ModifiedBy");

                    b.Property<DateTime?>("ModifiedDate");

                    b.Property<string>("Password");

                    b.Property<int>("RoleId");

                    b.Property<uint>("RowVersion")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnName("xmin")
                        .HasColumnType("xid");

                    b.Property<string>("UserName");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("Users","accounts");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CreatedBy = 1,
                            CreatedDate = new DateTime(2019, 12, 22, 14, 4, 42, 594, DateTimeKind.Local).AddTicks(5278),
                            IsDeleted = true,
                            Login = "admin@mail.ru",
                            Password = "123456",
                            RoleId = 1,
                            RowVersion = 0u
                        },
                        new
                        {
                            Id = 2,
                            CreatedBy = 1,
                            CreatedDate = new DateTime(2019, 12, 22, 14, 4, 42, 594, DateTimeKind.Local).AddTicks(7923),
                            IsDeleted = true,
                            Login = "tom@mail.ru",
                            Password = "123456",
                            RoleId = 1,
                            RowVersion = 0u
                        },
                        new
                        {
                            Id = 3,
                            CreatedBy = 1,
                            CreatedDate = new DateTime(2019, 12, 22, 14, 4, 42, 594, DateTimeKind.Local).AddTicks(7951),
                            IsDeleted = true,
                            Login = "bob@mail.ru",
                            Password = "123456",
                            RoleId = 2,
                            RowVersion = 0u
                        },
                        new
                        {
                            Id = 4,
                            CreatedBy = 1,
                            CreatedDate = new DateTime(2019, 12, 22, 14, 4, 42, 594, DateTimeKind.Local).AddTicks(7953),
                            IsDeleted = true,
                            Login = "sam@mail.ru",
                            Password = "123456",
                            RoleId = 2,
                            RowVersion = 0u
                        });
                });

            modelBuilder.Entity("OnionApp.Domain.Core.Entities.Accounts.UserMessage", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<int>("CreatedBy");

                    b.Property<DateTime>("CreatedDate");

                    b.Property<bool>("IsDeleted");

                    b.Property<bool>("IsReaded");

                    b.Property<string>("Message");

                    b.Property<int?>("ModifiedBy");

                    b.Property<DateTime?>("ModifiedDate");

                    b.Property<DateTime>("ReadDate");

                    b.Property<uint>("RowVersion")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnName("xmin")
                        .HasColumnType("xid");

                    b.Property<int>("ToUserId");

                    b.HasKey("Id");

                    b.HasIndex("ToUserId");

                    b.ToTable("UserMessages","accounts");
                });

            modelBuilder.Entity("OnionApp.Domain.Core.Entities.Devices.Device", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<int>("CreatedBy");

                    b.Property<DateTime>("CreatedDate");

                    b.Property<string>("DeviceSettings")
                        .HasColumnName("DeviceSettings")
                        .HasColumnType("json");

                    b.Property<int>("DeviceTypeId");

                    b.Property<bool>("IsDeleted");

                    b.Property<int?>("ModifiedBy");

                    b.Property<DateTime?>("ModifiedDate");

                    b.Property<uint>("RowVersion")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnName("xmin")
                        .HasColumnType("xid");

                    b.HasKey("Id");

                    b.HasIndex("DeviceTypeId");

                    b.ToTable("Devices","devices");
                });

            modelBuilder.Entity("OnionApp.Domain.Core.Entities.Dict.ChangeState", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<int>("CreatedBy");

                    b.Property<DateTime>("CreatedDate");

                    b.Property<bool>("IsDeleted");

                    b.Property<int?>("ModifiedBy");

                    b.Property<DateTime?>("ModifiedDate");

                    b.Property<uint>("RowVersion")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnName("xmin")
                        .HasColumnType("xid");

                    b.Property<string>("StateName")
                        .HasMaxLength(64);

                    b.HasKey("Id");

                    b.ToTable("ChangeStates","dicts");
                });

            modelBuilder.Entity("OnionApp.Domain.Core.Entities.Dict.DeviceType", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<int>("CreatedBy");

                    b.Property<DateTime>("CreatedDate");

                    b.Property<string>("DeviceTypeDescription");

                    b.Property<string>("DeviceTypeName")
                        .HasMaxLength(64);

                    b.Property<bool>("IsDeleted");

                    b.Property<int?>("ModifiedBy");

                    b.Property<DateTime?>("ModifiedDate");

                    b.Property<uint>("RowVersion")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnName("xmin")
                        .HasColumnType("xid");

                    b.HasKey("Id");

                    b.ToTable("DeviceTypes","dicts");
                });

            modelBuilder.Entity("OnionApp.Domain.Core.Entities.Dict.OrderStatus", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<int>("CreatedBy");

                    b.Property<DateTime>("CreatedDate");

                    b.Property<bool>("IsDeleted");

                    b.Property<int?>("ModifiedBy");

                    b.Property<DateTime?>("ModifiedDate");

                    b.Property<string>("OrderStatusDescription");

                    b.Property<string>("OrderStatusName");

                    b.Property<uint>("RowVersion")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnName("xmin")
                        .HasColumnType("xid");

                    b.HasKey("Id");

                    b.ToTable("OrderStatuses","dicts");
                });

            modelBuilder.Entity("OnionApp.Domain.Core.Entities.Dict.ReasonCompletion", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<int>("CreatedBy");

                    b.Property<DateTime>("CreatedDate");

                    b.Property<bool>("IsDeleted");

                    b.Property<int?>("ModifiedBy");

                    b.Property<DateTime?>("ModifiedDate");

                    b.Property<string>("ReasonDescription")
                        .HasColumnName("ReasonDescription")
                        .HasColumnType("text");

                    b.Property<string>("ReasonName")
                        .HasMaxLength(64);

                    b.Property<uint>("RowVersion")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnName("xmin")
                        .HasColumnType("xid");

                    b.HasKey("Id");

                    b.ToTable("ReasonCompletions","dicts");
                });

            modelBuilder.Entity("OnionApp.Domain.Core.Entities.Dicts.Client", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<int>("ClientTypeId");

                    b.Property<int>("CreatedBy");

                    b.Property<DateTime>("CreatedDate");

                    b.Property<bool>("IsDeleted");

                    b.Property<int?>("ModifiedBy");

                    b.Property<DateTime?>("ModifiedDate");

                    b.Property<string>("Name");

                    b.Property<uint>("RowVersion")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnName("xmin")
                        .HasColumnType("xid");

                    b.HasKey("Id");

                    b.HasIndex("ClientTypeId");

                    b.ToTable("Clients","dicts");
                });

            modelBuilder.Entity("OnionApp.Domain.Core.Entities.Dicts.ClientType", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<int>("CreatedBy");

                    b.Property<DateTime>("CreatedDate");

                    b.Property<bool>("IsDeleted");

                    b.Property<int?>("ModifiedBy");

                    b.Property<DateTime?>("ModifiedDate");

                    b.Property<string>("Name");

                    b.Property<uint>("RowVersion")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnName("xmin")
                        .HasColumnType("xid");

                    b.HasKey("Id");

                    b.ToTable("ClientTypes","dicts");
                });

            modelBuilder.Entity("OnionApp.Domain.Core.Entities.Logs.Log", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("ClassName");

                    b.Property<int>("CreatedBy");

                    b.Property<DateTime>("CreatedDate");

                    b.Property<bool>("IsDeleted");

                    b.Property<int>("LogTypeId");

                    b.Property<string>("Message");

                    b.Property<string>("MethodName");

                    b.Property<int?>("ModifiedBy");

                    b.Property<DateTime?>("ModifiedDate");

                    b.Property<string>("ModuleName");

                    b.Property<uint>("RowVersion")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnName("xmin")
                        .HasColumnType("xid");

                    b.HasKey("Id");

                    b.HasIndex("LogTypeId");

                    b.ToTable("Logs","logger");
                });

            modelBuilder.Entity("OnionApp.Domain.Core.Entities.Logs.LogType", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<int>("CreatedBy");

                    b.Property<DateTime>("CreatedDate");

                    b.Property<bool>("IsDeleted");

                    b.Property<int?>("ModifiedBy");

                    b.Property<DateTime?>("ModifiedDate");

                    b.Property<string>("Name");

                    b.Property<uint>("RowVersion")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnName("xmin")
                        .HasColumnType("xid");

                    b.HasKey("Id");

                    b.ToTable("LogTypes","logger");
                });

            modelBuilder.Entity("OnionApp.Domain.Core.Entities.Processing.Change", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<int>("ChangeStateId");

                    b.Property<DateTime?>("CloseDate");

                    b.Property<int>("CreatedBy");

                    b.Property<DateTime>("CreatedDate");

                    b.Property<bool>("IsDeleted");

                    b.Property<int?>("ModifiedBy");

                    b.Property<DateTime?>("ModifiedDate");

                    b.Property<DateTime>("OpenDate");

                    b.Property<uint>("RowVersion")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnName("xmin")
                        .HasColumnType("xid");

                    b.HasKey("Id");

                    b.HasIndex("ChangeStateId");

                    b.ToTable("Changes","processing");
                });

            modelBuilder.Entity("OnionApp.Domain.Core.Entities.Processing.Order", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<Guid?>("ChangeId");

                    b.Property<Guid>("ClientId");

                    b.Property<int>("CountPositions");

                    b.Property<int>("CreatedBy");

                    b.Property<DateTime>("CreatedDate");

                    b.Property<DateTime>("FinishDate");

                    b.Property<bool>("IsDeleted");

                    b.Property<int?>("ModifiedBy");

                    b.Property<DateTime?>("ModifiedDate");

                    b.Property<Guid?>("OrderId");

                    b.Property<int>("OrderStatusId");

                    b.Property<uint>("RowVersion")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnName("xmin")
                        .HasColumnType("xid");

                    b.HasKey("Id");

                    b.HasIndex("ChangeId");

                    b.HasIndex("ClientId");

                    b.HasIndex("OrderId");

                    b.HasIndex("OrderStatusId");

                    b.ToTable("Orders","processing");
                });

            modelBuilder.Entity("OnionApp.Domain.Core.Entities.Processing.OrderPosition", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<int>("CreatedBy");

                    b.Property<DateTime>("CreatedDate");

                    b.Property<bool>("IsDeleted");

                    b.Property<int?>("ModifiedBy");

                    b.Property<DateTime?>("ModifiedDate");

                    b.Property<uint>("RowVersion")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnName("xmin")
                        .HasColumnType("xid");

                    b.Property<Guid>("SAPBarcodeId");

                    b.HasKey("Id");

                    b.HasIndex("SAPBarcodeId");

                    b.ToTable("OrderPosition","processing");
                });

            modelBuilder.Entity("OnionApp.Domain.Core.Entities.Processing.SAPBarcode", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Barcode");

                    b.Property<int>("CreatedBy");

                    b.Property<DateTime>("CreatedDate");

                    b.Property<bool>("IsDeleted");

                    b.Property<bool>("IsScanned");

                    b.Property<int?>("ModifiedBy");

                    b.Property<DateTime?>("ModifiedDate");

                    b.Property<Guid>("OrderId");

                    b.Property<uint>("RowVersion")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnName("xmin")
                        .HasColumnType("xid");

                    b.HasKey("Id");

                    b.HasIndex("OrderId");

                    b.ToTable("SAPBarcodes","processing");
                });

            modelBuilder.Entity("OnionApp.Domain.Core.Entities.Processing.WorkMonitoring", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("AdditionalInformation")
                        .HasColumnName("AdditionalInformation")
                        .HasColumnType("text");

                    b.Property<int>("CreatedBy");

                    b.Property<DateTime>("CreatedDate");

                    b.Property<bool>("IsDeleted");

                    b.Property<int?>("ModifiedBy");

                    b.Property<DateTime?>("ModifiedDate");

                    b.Property<Guid>("OrderId");

                    b.Property<int>("ReasonComplationId");

                    b.Property<int?>("ReasonCompletionId");

                    b.Property<uint>("RowVersion")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnName("xmin")
                        .HasColumnType("xid");

                    b.HasKey("Id");

                    b.HasIndex("OrderId");

                    b.HasIndex("ReasonCompletionId");

                    b.ToTable("WorkMonitorings","processing");
                });

            modelBuilder.Entity("OnionApp.Domain.Core.Entities.Accounts.Rule", b =>
                {
                    b.HasOne("OnionApp.Domain.Core.Entities.Accounts.Role", "Role")
                        .WithMany("Rules")
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("OnionApp.Domain.Core.Entities.Accounts.SysFunction", "SysFunction")
                        .WithMany("Rules")
                        .HasForeignKey("SysFunctionId")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("OnionApp.Domain.Core.Entities.Accounts.User", b =>
                {
                    b.HasOne("OnionApp.Domain.Core.Entities.Accounts.Role", "Role")
                        .WithMany("Users")
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("OnionApp.Domain.Core.Entities.Accounts.UserMessage", b =>
                {
                    b.HasOne("OnionApp.Domain.Core.Entities.Accounts.User", "User")
                        .WithMany("UserMessages")
                        .HasForeignKey("ToUserId")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("OnionApp.Domain.Core.Entities.Devices.Device", b =>
                {
                    b.HasOne("OnionApp.Domain.Core.Entities.Dict.DeviceType", "DeviceType")
                        .WithMany("Devices")
                        .HasForeignKey("DeviceTypeId")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("OnionApp.Domain.Core.Entities.Dicts.Client", b =>
                {
                    b.HasOne("OnionApp.Domain.Core.Entities.Dicts.ClientType", "ClientType")
                        .WithMany("Clients")
                        .HasForeignKey("ClientTypeId")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("OnionApp.Domain.Core.Entities.Logs.Log", b =>
                {
                    b.HasOne("OnionApp.Domain.Core.Entities.Logs.LogType", "LogType")
                        .WithMany("Logs")
                        .HasForeignKey("LogTypeId")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("OnionApp.Domain.Core.Entities.Processing.Change", b =>
                {
                    b.HasOne("OnionApp.Domain.Core.Entities.Dict.ChangeState", "ChangeState")
                        .WithMany("Changes")
                        .HasForeignKey("ChangeStateId")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("OnionApp.Domain.Core.Entities.Processing.Order", b =>
                {
                    b.HasOne("OnionApp.Domain.Core.Entities.Processing.Change", "Change")
                        .WithMany("Orders")
                        .HasForeignKey("ChangeId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("OnionApp.Domain.Core.Entities.Dicts.Client", "Client")
                        .WithMany("Orders")
                        .HasForeignKey("ClientId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("OnionApp.Domain.Core.Entities.Processing.Order")
                        .WithMany("Orders")
                        .HasForeignKey("OrderId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("OnionApp.Domain.Core.Entities.Dict.OrderStatus", "OrderStatus")
                        .WithMany("Orders")
                        .HasForeignKey("OrderStatusId")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("OnionApp.Domain.Core.Entities.Processing.OrderPosition", b =>
                {
                    b.HasOne("OnionApp.Domain.Core.Entities.Processing.SAPBarcode", "SAPBarcode")
                        .WithMany("OrderPositions")
                        .HasForeignKey("SAPBarcodeId")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("OnionApp.Domain.Core.Entities.Processing.SAPBarcode", b =>
                {
                    b.HasOne("OnionApp.Domain.Core.Entities.Processing.Order", "Order")
                        .WithMany()
                        .HasForeignKey("OrderId")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("OnionApp.Domain.Core.Entities.Processing.WorkMonitoring", b =>
                {
                    b.HasOne("OnionApp.Domain.Core.Entities.Processing.Order", "Order")
                        .WithMany()
                        .HasForeignKey("OrderId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("OnionApp.Domain.Core.Entities.Dict.ReasonCompletion", "ReasonCompletion")
                        .WithMany("WorkMonitorings")
                        .HasForeignKey("ReasonCompletionId")
                        .OnDelete(DeleteBehavior.Restrict);
                });
#pragma warning restore 612, 618
        }
    }
}
