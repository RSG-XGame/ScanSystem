// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;
using OnionApp.Infrastructure.Data;

namespace OnionApp.Infrastructure.Data.Migrations
{
    [DbContext(typeof(ScanContext))]
    partial class ScanContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.SerialColumn)
                .HasAnnotation("ProductVersion", "2.2.6-servicing-10079")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            modelBuilder.Entity("OnionApp.Domain.Core.Entities.Role", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<int>("CreatedBy");

                    b.Property<DateTime>("CreatedDate");

                    b.Property<bool>("IsEnabled");

                    b.Property<int?>("ModifiedBy");

                    b.Property<DateTime?>("ModifiedDate");

                    b.Property<string>("RoleName");

                    b.Property<byte[]>("Version")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate();

                    b.HasKey("Id");

                    b.ToTable("Roles");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CreatedBy = 1,
                            CreatedDate = new DateTime(2019, 11, 30, 21, 2, 11, 353, DateTimeKind.Local).AddTicks(7795),
                            IsEnabled = true,
                            RoleName = "admin"
                        },
                        new
                        {
                            Id = 2,
                            CreatedBy = 1,
                            CreatedDate = new DateTime(2019, 11, 30, 21, 2, 11, 354, DateTimeKind.Local).AddTicks(6974),
                            IsEnabled = true,
                            RoleName = "user"
                        });
                });

            modelBuilder.Entity("OnionApp.Domain.Core.Entities.User", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<int>("CreatedBy");

                    b.Property<DateTime>("CreatedDate");

                    b.Property<bool>("IsEnabled");

                    b.Property<string>("Login");

                    b.Property<int?>("ModifiedBy");

                    b.Property<DateTime?>("ModifiedDate");

                    b.Property<string>("Password");

                    b.Property<int?>("RoleId");

                    b.Property<string>("UserName");

                    b.Property<byte[]>("Version")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate();

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("Users");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CreatedBy = 1,
                            CreatedDate = new DateTime(2019, 11, 30, 21, 2, 11, 354, DateTimeKind.Local).AddTicks(7451),
                            IsEnabled = true,
                            Login = "admin@mail.ru",
                            Password = "123456",
                            RoleId = 1
                        },
                        new
                        {
                            Id = 2,
                            CreatedBy = 1,
                            CreatedDate = new DateTime(2019, 11, 30, 21, 2, 11, 354, DateTimeKind.Local).AddTicks(9023),
                            IsEnabled = true,
                            Login = "tom@mail.ru",
                            Password = "123456",
                            RoleId = 1
                        },
                        new
                        {
                            Id = 3,
                            CreatedBy = 1,
                            CreatedDate = new DateTime(2019, 11, 30, 21, 2, 11, 354, DateTimeKind.Local).AddTicks(9049),
                            IsEnabled = true,
                            Login = "bob@mail.ru",
                            Password = "123456",
                            RoleId = 2
                        },
                        new
                        {
                            Id = 4,
                            CreatedBy = 1,
                            CreatedDate = new DateTime(2019, 11, 30, 21, 2, 11, 354, DateTimeKind.Local).AddTicks(9052),
                            IsEnabled = true,
                            Login = "sam@mail.ru",
                            Password = "123456",
                            RoleId = 2
                        });
                });

            modelBuilder.Entity("OnionApp.Domain.Core.Entities.User", b =>
                {
                    b.HasOne("OnionApp.Domain.Core.Entities.Role", "Role")
                        .WithMany("Users")
                        .HasForeignKey("RoleId");
                });
#pragma warning restore 612, 618
        }
    }
}
